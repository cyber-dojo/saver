name: Tests built image, deploys to aws-beta and aws-prod

on:
  workflow_call:
    secrets:
      KOSLI_API_TOKEN:
        required: true
      SNYK_TOKEN:
        required: true
    inputs:
      KOSLI_HOST:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      AWS_ACCOUNT_ID_BETA:
        required: true
        type: string
      AWS_ACCOUNT_ID_PROD:
        required: true
        type: string

env: 
  KOSLI_ORG: cyber-dojo
  KOSLI_FLOW: saver
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_CLI_VERSION: "2.6.11"
  KOSLI_HOST: ${{ inputs.KOSLI_HOST }}
  IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  AWS_ACCOUNT_ID_BETA: ${{ inputs.AWS_ACCOUNT_ID_BETA }}
  ECR_REGISTRY_BETA: ${{ inputs.AWS_ACCOUNT_ID_BETA }}.dkr.ecr.eu-central-1.amazonaws.com
  AWS_ACCOUNT_ID_PROD: ${{ inputs.AWS_ACCOUNT_ID_PROD }}
  ECR_REGISTRY_PROD: ${{ inputs.AWS_ACCOUNT_ID_PROD }}.dkr.ecr.eu-central-1.amazonaws.com
  AWS_REGION: eu-central-1
  GH_ACTIONS_IAM_ROLE_NAME: gh_actions_services
  # KOSLI_DRY_RUN: "True"

jobs:

  with-vars:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.with_vars.outputs.image_tag }}
      aws_account_id_beta: ${{ steps.with_vars.outputs.aws_account_id_beta }}
      ecr_registry_beta: ${{ steps.with_vars.outputs.ecr_registry_beta }}
      aws_account_id_prod: ${{ steps.with_vars.outputs.aws_account_id_prod }}
      ecr_registry_prod: ${{ steps.with_vars.outputs.ecr_registry_prod }}
      gh_actions_iam_role_name: ${{ steps.with_vars.outputs.gh_actions_iam_role_name }}
    steps:
    - name: Prepare  # deploy-to-aws-beta: with: can only use ${{ needs.X.outputs.... }}
      id: with_vars
      run: |
        echo "image_tag=${{ env.IMAGE_TAG }}" >> ${GITHUB_OUTPUT}
        echo "aws_account_id_beta=${{ env.AWS_ACCOUNT_ID_BETA }}" >> ${GITHUB_OUTPUT}
        echo "ecr_registry_beta=${{ env.ECR_REGISTRY_BETA }}" >> >> ${GITHUB_OUTPUT}
        echo "aws_account_id_prod=${{ env.AWS_ACCOUNT_ID_PROD }}" >> ${GITHUB_OUTPUT}
        echo "ecr_registry_prod=${{ env.ECR_REGISTRY_PROD }}" >> ${GITHUB_OUTPUT}
        echo "gh_actions_iam_role_name=${{ env.GH_ACTIONS_IAM_ROLE_NAME }}" >> ${GITHUB_OUTPUT}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ env.KOSLI_CLI_VERSION }}

      - name: Create Kosli flow
        run:
          kosli create flow ${{ env.KOSLI_FLOW }} 
            --description="Group/Kata model+persistence" 
            --template=artifact,branch-coverage,snyk-scan

      - name: Report image to Kosli
        run: |
          docker pull cyberdojo/saver:${{ env.IMAGE_TAG }}          
          kosli report artifact cyberdojo/saver:${{ env.IMAGE_TAG }} \
            --artifact-type=docker

      # Run tests with coverage ------------------
      - name: Run tests and create branch coverage json file
        run:
          ./sh/run_tests_with_coverage.sh

      - name: Report branch coverage to Kosli
        run:
          kosli report evidence artifact generic cyberdojo/saver:${{ env.IMAGE_TAG }}
              --artifact-type=docker
              --description="server & client branch-coverage reports"
              --name=branch-coverage
              --user-data=./tmp/evidence.json

      # Snyk image scanning ------------------
      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        run:
           snyk container test cyberdojo/saver:${{ env.IMAGE_TAG }}
            --file=Dockerfile
            --json-file-output=snyk.json
            --policy-path=.snyk

      - name: Report Snyk scan results evidence to Kosli
        run:
          kosli report evidence artifact snyk cyberdojo/saver:${{ env.IMAGE_TAG }} 
            --artifact-type=docker 
            --name=snyk-scan 
            --scan-results=snyk.json

      # Short-circuit if any test has failed ------------------
      - name: Kosli SDLC gate
        run:
          kosli assert artifact cyberdojo/saver:${{ env.IMAGE_TAG }} 
            --artifact-type=docker


  push-image-to-beta-ecr:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID_BETA }}:role/${{ env.GH_ACTIONS_IAM_ROLE_NAME }}

      - name: Login to Amazon ECR (Elastic Container Registry)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to private beta-ECR
        run: |
          docker pull cyberdojo/saver:${{ env.IMAGE_TAG }}
          docker tag cyberdojo/saver:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY_BETA }}/saver:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY_BETA }}/saver:${{ env.IMAGE_TAG }}
          docker logout

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ env.KOSLI_CLI_VERSION }}

      - name: Report expected aws-beta deployment to Kosli
        run:
          kosli expect deployment cyberdojo/saver:${{ env.IMAGE_TAG }}
            --artifact-type=docker
            --description="Deployed to aws-beta in Github Actions pipeline"
            --environment=aws-beta


  deploy-to-aws-beta:
    needs: [with-vars, test, push-image-to-beta-ecr]
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.7
    with:
      aws_region: eu-central-1
      aws_role_arn: arn:aws:iam::${{ needs.with-vars.outputs.aws_account_id_beta }}:role/${{ needs.with-vars.outputs.gh_actions_iam_role_name }}
      aws_default_region: eu-central-1
      aws_role_duration: 900
      working_directory: deployment/terraform/
      tf_apply: 'true'
      tf_version: v1.4.5
      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ needs.with-vars.outputs.ecr_registry_beta }}/saver:${{ needs.with-vars.outputs.image_tag }}"}'


#  push-image-to-prod-ecr:
#    needs: [deploy-to-aws-beta]
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: write
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-region: ${{ env.AWS_REGION }}
#          role-duration-seconds: 2400
#          role-session-name: ${{ github.event.repository.name }}
#          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID_PROD }}:role/${{ env.GH_ACTIONS_IAM_ROLE_NAME }}
#
#      - name: Login to Amazon ECR (Elastic Container Registry)
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Push image to private prod-ECR
#        run: |
#          docker pull cyberdojo/saver:${{ env.IMAGE_TAG }}
#          docker tag cyberdojo/saver:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY_PROD }}/saver:${{ env.IMAGE_TAG }}
#          docker push ${{ env.ECR_REGISTRY_PROD }}/saver:${{ env.IMAGE_TAG }}
#          docker logout
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version:
#            ${{ env.KOSLI_CLI_VERSION }}
#
#      - name: Report expected aws-beta deployment to Kosli
#        run:
#          kosli expect deployment cyberdojo/saver:${{ env.IMAGE_TAG }}
#            --artifact-type=docker
#            --description="Deployed to aws-beta in Github Actions pipeline"
#            --environment=aws-prod
#
#  deploy-to-aws-prod:
#    needs: [with-vars, push-image-to-prod-ecr]
#    permissions:
#      id-token: write
#      contents: write
#    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.7
#    with:
#      aws_region: eu-central-1
#      aws_role_arn: arn:aws:iam::${{ needs.with-vars.outputs.aws_account_id_prod }}:role/${{ needs.with-vars.outputs.gh_actions_iam_role_name }}
#      aws_default_region: eu-central-1
#      aws_role_duration: 900
#      working_directory: deployment/terraform/
#      tf_apply: 'true'
#      tf_version: v1.4.5
#      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ needs.with-vars.outputs.ecr_registry_prod }}/saver:${{ needs.with-vars.outputs.image_tag }}"}'
