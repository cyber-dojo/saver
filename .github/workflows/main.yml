name: Main - reports Trails to https://app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}           # False
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}                 # https://app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}                   # cyber-dojo
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}                 # saver-ci
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_TRAIL: ${{ github.sha }}
  SERVICE_NAME: ${{ github.event.repository.name }}  # saver
  IMAGE_TAR_FILENAME: /tmp/${{ github.event.repository.name }}:${{ github.sha }}.tar

jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      aws_account_id: ${{ steps.vars.outputs.aws_account_id }}
      ecr_registry: ${{ steps.vars.outputs.ecr_registry }}
      aws_region: ${{ steps.vars.outputs.aws_region }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}
      service_name: ${{ steps.vars.outputs.service_name }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
      image_name: ${{ steps.vars.outputs.image_name }}
    steps:
    - name: Prepare output variables for workflow jobs
      id: vars
      run: |
        IMAGE_TAG=${GITHUB_SHA:0:7}        
        AWS_ID=244531986313
        ECR_REGISTRY="${AWS_ID}.dkr.ecr.eu-central-1.amazonaws.com"
        IMAGE_NAME="${ECR_REGISTRY}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
        
        echo "aws_account_id=${AWS_ID}"                     >> ${GITHUB_OUTPUT}
        echo "ecr_registry=${ECR_REGISTRY}"                 >> ${GITHUB_OUTPUT}
        echo "aws_region=eu-central-1"                      >> ${GITHUB_OUTPUT}
        echo "gh_actions_iam_role_name=gh_actions_services" >> ${GITHUB_OUTPUT}
        echo "service_name=${{ env.SERVICE_NAME }}"         >> ${GITHUB_OUTPUT}
        echo "image_tag=${IMAGE_TAG}"                       >> ${GITHUB_OUTPUT}
        echo "image_name=${IMAGE_NAME}"                     >> ${GITHUB_OUTPUT}


  kosli-trail:
    needs: [variables]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow "${{ env.KOSLI_FLOW }}"
            --description="Group/Kata model+persistence"
            --template-file=.kosli.yml

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${{ env.KOSLI_TRAIL }}"
            --description="${{ github.actor }} - $(git log -1 --pretty=%B)"


  pull-request:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli Trail
        run:
          kosli attest pullrequest github
            --github-token=${{ secrets.GITHUB_TOKEN }}
            --name=pull-request


#  lint:
#    needs: [kosli-trail]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: 3.2.0
#          bundler-cache: true
#
#      - name: Setup Kosli CLI
#        uses: kosli-dev/setup-cli-action@v2
#        with:
#          version: ${{ vars.KOSLI_CLI_VERSION }}
#
#      - name: Run Rubocop linter on source, attest evidence to Kosli Trail
#        env:
#          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
#        run: |
#          mkdir -p "${KOSLI_ATTACHMENTS}"
#          set +e
#          make lint | tee "${KOSLI_ATTACHMENTS}"/rubocop.log
#          STATUS=${PIPESTATUS[0]}
#          set -e
#
#          KOSLI_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
#          cp .rubocop.yml "${KOSLI_ATTACHMENTS}"
#          kosli attest generic \
#            --attachments="${KOSLI_ATTACHMENTS}" \
#            --compliant="${KOSLI_COMPLIANT}" \
#            --name=saver.lint
#          exit ${STATUS}


  build-image:
    needs: [variables, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.variables.outputs.image_name }}
    permissions:
      id-token: write
      contents: write
    outputs:
      artifact_digest: ${{ steps.variables.outputs.artifact_digest }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.variables.outputs.aws_region }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ needs.variables.outputs.aws_account_id }}:role/${{ needs.variables.outputs.gh_actions_iam_role_name }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=registry
          cache-to: type=inline,mode=max
          build-args:
            COMMIT_SHA=${{ github.sha }}

      - name: Tar Docker image
        run:
          docker image save ${{ env.IMAGE_NAME }} --output ${{ env.IMAGE_TAR_FILENAME }}

      - name: Cache Docker image
        uses: actions/cache@v4.0.0
        with:
          path: ${{ env.IMAGE_TAR_FILENAME }}
          key: ${{ env.IMAGE_NAME }}

      - name: Make the image digest available to following steps and jobs
        id: variables
        run: |
          DIGEST=$( echo ${{ steps.docker_build.outputs.digest }} | sed 's/.*://')
          echo "artifact_digest=${DIGEST}"   >> ${GITHUB_OUTPUT}
          echo "KOSLI_FINGERPRINT=${DIGEST}" >> ${GITHUB_ENV}

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image evidence to Kosli Trail
        env:
          KOSLI_FINGERPRINT: ${{ env.KOSLI_FINGERPRINT }}
        run:
          kosli attest artifact "${IMAGE_NAME}"
            --name=saver


  unit-tests:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.variables.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Retrieve Docker image from cache
        uses: actions/cache@v4.0.0
        with:
          path: ${{ env.IMAGE_TAR_FILENAME }}
          key: ${{ env.IMAGE_NAME }}

      - name: Load Docker image
        run: docker image load --input ${{ env.IMAGE_TAR_FILENAME }}

      - name: Run tests with branch-coverage
        run:
          make test

      - name: Attest results to Kosli
        env:
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
        run:
          kosli attest generic "${IMAGE_NAME}" 
              --attachments=./tmp/coverage 
              --description="server & client branch-coverage" 
              --name=saver.branch-coverage 
              --user-data=./tmp/evidence.json



  snyk-container-scan:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk container scan and report results to Kosli Trail
        env:
          IMAGE_NAME:      ${{ needs.variables.outputs.image_name }}
          SARIF_FILENAME:  snyk.container.scan.json
          SNYK_TOKEN:      ${{ secrets.SNYK_TOKEN }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
        run: |
          set +e          
          snyk container test ${IMAGE_NAME} \
            --file=Dockerfile \
            --policy-path=.snyk \
            --sarif \
            --sarif-file-output="${SARIF_FILENAME}"
          set -e
                    
          mkdir "${KOSLI_ATTACHMENTS}"
          cp .snyk "${KOSLI_ATTACHMENTS}"

          kosli attest snyk "${IMAGE_NAME}" \
            --name=saver.snyk-container-scan \
            --scan-results="${SARIF_FILENAME}"


  snyk-code-scan:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan and report results to Kosli Trail
        env:
          IMAGE_NAME:        ${{ needs.variables.outputs.image_name }}
          SARIF_FILENAME:    snyk.code.scan.json
          SNYK_TOKEN:        ${{ secrets.SNYK_TOKEN }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
        run: |
          set +e
          snyk code test \
            --policy-path=.snyk \
            --sarif \
            --sarif-file-output="${SARIF_FILENAME}" \
            .
          set -e

          mkdir "${KOSLI_ATTACHMENTS}"
          cp .snyk "${KOSLI_ATTACHMENTS}"

          kosli attest snyk "${IMAGE_NAME}" \
            --name=saver.snyk-code-scan \
            --scan-results="${SARIF_FILENAME}"


  sdlc-control-gate:
    needs: [variables, build-image, pull-request, unit-tests, snyk-container-scan, snyk-code-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit the Trail
        env:
          IMAGE_NAME: ${{ needs.variables.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
        run:
          kosli assert artifact ${IMAGE_NAME}


  approve-deployment-to-beta:
    needs: [variables, build-image, sdlc-control-gate]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://beta.cyber-dojo.org
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest approval of deployment to Kosli
        env:
          IMAGE_NAME:        ${{ needs.variables.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
          KOSLI_ENVIRONMENT: aws-beta
        run:
          kosli report approval ${IMAGE_NAME}
            --approver="${{ github.actor }}"


  deploy-to-beta:
    needs: [approve-deployment-to-beta, variables]
    uses: ./.github/workflows/sub_deploy_to_beta.yml
    with:
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}


  # attest-beta-tf-artifacts:
  #   needs: [deploy-to-beta]
  #   uses: ./.github/workflows/attest_tf_beta_artifacts.yml
  #   secrets:
  #     KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}


  approve-deployment-to-prod:
    needs: [deploy-to-beta, variables, build-image]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://cyber-dojo.org
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest approval of deployment to Kosli
        env:
          IMAGE_NAME:        ${{ needs.variables.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.artifact_digest }}
          KOSLI_ENVIRONMENT: aws-prod
        run:
          kosli report approval ${IMAGE_NAME}
            --approver="${{ github.actor }}"


  deploy-to-prod:
    needs: [approve-deployment-to-prod, variables]
    uses: ./.github/workflows/sub_deploy_to_prod.yml
    with:
      IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}
    secrets:
      KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}


  # attest-prod-tf-artifacts:
  #   needs: [deploy-to-prod]
  #   uses: ./.github/workflows/attest_tf_prod_artifacts.yml
  #   secrets:
  #     KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}


  # The cyberdojo/versioner refresh-env.sh script
  # https://github.com/cyber-dojo/versioner/blob/master/sh/refresh-env.sh
  # relies on being able to:
  #   - get the :latest image from dockerhub
  #   - extract the SHA env-var embedded inside it
  #   - use the 1st 7 chars of the SHA as a latest-equivalent tag from dockerhub

  push-latest:
    needs: [deploy-to-prod, variables]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.variables.outputs.aws_region }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ needs.variables.outputs.aws_account_id }}:role/${{ needs.variables.outputs.gh_actions_iam_role_name }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Tag image to :latest and push to Dockerhub Registry
        env:
          IMAGE_NAME: ${{ needs.variables.outputs.image_name }}
          IMAGE_TAG: ${{ needs.variables.outputs.image_tag }}
        run: |
          docker pull "${IMAGE_NAME}"
          docker tag "${IMAGE_NAME}" cyberdojo/${{ env.SERVICE_NAME }}:${IMAGE_TAG}
          docker tag "${IMAGE_NAME}" cyberdojo/${{ env.SERVICE_NAME }}:latest
          docker push cyberdojo/${{ env.SERVICE_NAME }}:${IMAGE_TAG}
          docker push cyberdojo/${{ env.SERVICE_NAME }}:latest
