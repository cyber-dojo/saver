name: Sub - deploy to aws-beta

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
    secrets:
      KOSLI_API_TOKEN:
        required: true


env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}           # False
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}                 # https://app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}                   # cyber-dojo
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}                 # saver-ci
  KOSLI_TRAIL: ${{ github.sha }}
  SERVICE_NAME: ${{ github.event.repository.name }}  # saver

jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      service_name: ${{ steps.vars.outputs.service_name }}
      image_tag: ${{ steps.vars.outputs.image_tag }}
      aws_account_id: ${{ steps.vars.outputs.aws_account_id }}
      ecr_registry: ${{ steps.vars.outputs.ecr_registry }}
      aws_region: ${{ steps.vars.outputs.aws_region }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}
    steps:
    - name: Prepare outputs for fivexl deployment workflow
      id: vars
      run: |
        echo "service_name=${{ env.SERVICE_NAME }}"                         >> ${GITHUB_OUTPUT}
        echo "image_tag=${{ inputs.IMAGE_TAG }}"                            >> ${GITHUB_OUTPUT}
        echo "aws_account_id=244531986313"                                  >> ${GITHUB_OUTPUT}
        echo "ecr_registry=244531986313.dkr.ecr.eu-central-1.amazonaws.com" >> ${GITHUB_OUTPUT}
        echo "aws_region=eu-central-1"                                      >> ${GITHUB_OUTPUT}
        echo "gh_actions_iam_role_name=gh_actions_services"                 >> ${GITHUB_OUTPUT}

#  push-image-to-beta-ecr:
#    needs: [variables]
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: write
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ${{ needs.variables.outputs.aws_region }}
#          role-duration-seconds: 2400
#          role-session-name: ${{ github.event.repository.name }}
#          role-to-assume: arn:aws:iam::${{ needs.variables.outputs.aws_account_id }}:role/${{ needs.variables.outputs.gh_actions_iam_role_name }}
#
#      - name: Login to Amazon ECR (Elastic Container Registry)
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Push image to private beta-ECR
#        run: |
#          PUBLIC_IMAGE_NAME=cyberdojo/${{ needs.variables.outputs.service_name }}:${{ inputs.IMAGE_TAG }}
#          PRIVATE_IMAGE_NAME=${{ needs.variables.outputs.ecr_registry }}/${{ needs.variables.outputs.service_name }}:${{ inputs.IMAGE_TAG }}
#          docker pull ${PUBLIC_IMAGE_NAME}
#          docker tag ${PUBLIC_IMAGE_NAME} ${PRIVATE_IMAGE_NAME}
#          docker push ${PRIVATE_IMAGE_NAME}

  deploy-to-aws-beta:
    needs: [variables]
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.20
    with:
      aws_region: ${{ needs.variables.outputs.aws_region }}
      aws_role_arn: arn:aws:iam::${{ needs.variables.outputs.aws_account_id }}:role/${{ needs.variables.outputs.gh_actions_iam_role_name }}
      aws_default_region: ${{ needs.variables.outputs.aws_region }}
      aws_role_duration: 900
      working_directory: deployment/terraform/
      tf_apply: 'true'
      tf_version: v1.4.5
      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ needs.variables.outputs.ecr_registry }}/${{ needs.variables.outputs.service_name }}:${{ needs.variables.outputs.image_tag }}"}'
      tf_sh_version: 0.2.1
      tf_upload_artifact_name_suffix: "_beta"
      tf_upload_artifact_state_file: 'true'
      tf_upload_artifact_plan: 'true'
      tf_state_file_dir_on_s3: "terraform/${{ needs.variables.outputs.service_name }}"
      tf_state_file_name: "${{ needs.variables.outputs.service_name }}.tfstate"
