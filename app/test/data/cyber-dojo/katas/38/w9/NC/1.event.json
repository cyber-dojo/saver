{"files":{"test_hiker.py":{"content":"from hiker import global_answer, Hiker\nimport unittest\n\n\nclass TestHiker(unittest.TestCase):\n\n    def test_global_function(self):\n        self.assertEqual(42, global_answer())\n\n    def test_instance_method(self):\n        self.assertEqual(42, Hiker().instance_answer())\n\n    def test_global_function2(self):\n        self.assertEqual(42, global_answer())\n\n    def test_instance_method2(self):\n        self.assertEqual(42, Hiker().instance_answer())\n        \n\nif __name__ == '__main__':\n    unittest.main()  # pragma: no cover\n"},"hiker.py":{"content":"'''The starting files are unrelated to the exercise.\n\nThey simply show syntax for writing and testing\n  o) a global function\n  o) an instance method\nPick the style that best fits the exercise.\nThen delete the other one, along with this comment!\n'''\n\ndef global_answer():\n    return 6 * 9\n\nclass Hiker:\n\n    def instance_answer(self):\n        return global_answer()\n"},"cyber-dojo.sh":{"content":"set -e\n\n# --------------------------------------------------------------\n# Text files under /sandbox are automatically returned...\nsource ~/cyber_dojo_fs_cleaners.sh\nexport REPORT_DIR=${CYBER_DOJO_SANDBOX}/report\nfunction cyber_dojo_enter()\n{\n  # 1. Only return _newly_ generated reports.\n  cyber_dojo_reset_dirs ${REPORT_DIR}\n}\nfunction cyber_dojo_exit()\n{\n  # 2. Remove text files we don't want returned.\n  cyber_dojo_delete_dirs .pytest_cache # ...\n  #cyber_dojo_delete_files ...\n}\ncyber_dojo_enter\ntrap cyber_dojo_exit EXIT SIGTERM\n# --------------------------------------------------------------\n\ncoverage3 run \\\n  --source=${CYBER_DOJO_SANDBOX} \\\n  --module unittest \\\n  *test*.py\n\n# https://coverage.readthedocs.io/en/v4.5.x/index.html\n\ncoverage3 report \\\n  --show-missing \\\n    > ${REPORT_DIR}/coverage.txt\n\n# http://pycodestyle.pycqa.org/en/latest/intro.html#configuration\n\npycodestyle \\\n  ${CYBER_DOJO_SANDBOX} \\\n    --show-source `# show source code for each error` \\\n    --show-pep8   `# show relevent text from pep8` \\\n    --ignore E302,E305,W293 \\\n    --max-line-length=80 \\\n      > ${REPORT_DIR}/style.txt\n\n# E302 expected 2 blank lines, found 0\n# E305 expected 2 blank lines after end of function or class\n# W293 blank line contains whitespace\n"},"readme.txt":{"content":"Write a program that prints the numbers from 1 to 100, but...\n\nnumbers that are exact multiples of 3, or that contain 3, must print a string containing \"Fizz\"\n   For example 9 -> \"...Fizz...\"\n   For example 31 -> \"...Fizz...\"\n\nnumbers that are exact multiples of 5, or that contain 5, must print a string containing \"Buzz\"\n   For example 10 -> \"...Buzz...\"\n   For example 51 -> \"...Buzz...\"\n"}},"stdout":{"content":"","truncated":false},"stderr":{"content":"FFFF\n======================================================================\nFAIL: test_global_function (test_hiker.TestHiker)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sandbox/test_hiker.py\", line 8, in test_global_function\n    self.assertEqual(42, global_answer())\nAssertionError: 42 != 54\n\n======================================================================\nFAIL: test_global_function2 (test_hiker.TestHiker)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sandbox/test_hiker.py\", line 14, in test_global_function2\n    self.assertEqual(42, global_answer())\nAssertionError: 42 != 54\n\n======================================================================\nFAIL: test_instance_method (test_hiker.TestHiker)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sandbox/test_hiker.py\", line 11, in test_instance_method\n    self.assertEqual(42, Hiker().instance_answer())\nAssertionError: 42 != 54\n\n======================================================================\nFAIL: test_instance_method2 (test_hiker.TestHiker)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sandbox/test_hiker.py\", line 17, in test_instance_method2\n    self.assertEqual(42, Hiker().instance_answer())\nAssertionError: 42 != 54\n\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nFAILED (failures=4)\n","truncated":false},"status":"1","duration":1.199071,"colour":"red","predicted":"none","index":1,"time":[2020,11,30,14,7,28,706554]}