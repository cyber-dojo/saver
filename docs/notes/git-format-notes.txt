
The decision to only offer a download of a kata (and not a group)
means that in v2 the group could still be the same as v1. That is, not based on git.
Only /cyber-dojo/katas/ needs to use git for v2.


The git v2 kata directory structure will need to be like this:
I want the files stored in the v2 git repo to be exactly as I want them.
And a download will literally just tgz the whole git repo.


	/files/*
	  - holds all the text files the user sees in the browser.
	    The files sent to runner and saved in runner's /sandbox dir.
      
  /truncations.json
    - holds all the values of the truncated keys, eg
      { "files" => {
          "cyber-dojo.sh" => false,
          "tennis.py" => false
        },
        "stdout" => false,
        "stderr" => false,
        "status" => false
      }
      
  /manifest.json
    - never changes. Holds eg, the docker image name.
    
	/config/*
	  - the files holding the state of the options, eg
   		   is prediction on/off
         is theme light/dark
      and probably more in the future.
      
	/events.json    
      This is the events SUMMARY file. Used by dashboard.
         viz: {colour,time,prediction,duration,index} for each event
	    This is appended to for each test run. 
      There could be saver outages. See saver-outage-gaps.txt
      These outages will be back-filled once saver is back online.
      So index values in json hash _ARE_ strictly +1 incrementing.
      
  /event.json
      Summary info as above {colour,time,prediction,duration,index}
      for the most recent event.
      Allows faster re-enter/refresh on browser.
      Currently stored as N.event.json
      
  /stdout
  /stderr
  /status
  
      

events.json
-----------
Only files for integer-tags will ever be harvested
eg for differ and browser diff/re-enter/refresh
This is the file that will be read by the browser to determine what each tag is.
Is the initial commit? Is it a test event? Is it a file rename? etc
The browser can filter. 
I should add a new "type":"test" key to make filtering easier.



- How to implement v2 kata_event(id, index)
  This will be needed by differ. And by browser re-enter/refresh.

  - $ git archive --format=tar treeish
    The writes a tgz stream to stdout.
    It should be possible to read the tgz file in memory, like runner does.
    
      tgz = shell.capture("cd #{repo_dir} && git archive --format=tar #{index}")
      unzipped = Gnu.unzip(tgz)
      reader = TarFile::Reader.new(unzipped)
      files = reader.files.each.with_object({}) do |(filename,content),memo|
        memo[filename] = content
      end
      # TODO: Does files[] needs to be put into the correct format ?
      # could differ simply only process files,stdout,stderr,status ?
      No need for an external `git ls-tree -r treeish` command to get file paths.



Option change, eg prediction on -> off 
??????
o) process its file in config/ as per normal
o) do NOT do a git commit+tag
o) Now have to be very careful about next commit...



It would be nice if v2 in git format would allow a diff to happen
really fast as a saver service. Viz to allow differ to not need
to get was_files and now_files and then do a diff.
However note that a git diff does not show output for files that are 
o) renamed with no change at all.
o) completely unchanged 
And differ needs this info. Particularly unchanged files.
So saver could offer a kata_diff(id,was,now) method
in its API which would return two chunks of information
- 1. saver.kata_event(id,was_index)
- 2. The raw diff of {id,was_index,now_index}




- TODOS
    i. Add v2 storage to saver that stores directly in git format.
   ii. Add kata_git_diff() to saver and use in differ service.
       It can do git diff directly      
  iii. Add kata_git_repo_tgz() to saver and offer download option in UI
       It can do tar directly

- Don't offer group_download_tgz()
  Only offer kata_download_tgz()

- Q96 test runs in ~0.3s
  This shows that generating the git repo on-the-fly is not feasible. Too slow.
  I need to extend model with v2 that saves directly in git format.
  Then model can expose two new API methods
     kata_git_repo_tgz(id)
	   This is stateless. Just create a tgz file in /tmp
	   It can only be offered (from UI) for version 2 katas initially.
	   Later I can provide an automatic migration for v0,v1 repos. 
	   NOTE: Migration will need to set dates in the past for git commits.
	   See https://stackoverflow.com/questions/3895453/how-do-i-make-a-git-commit-in-the-past
	   Env vars GIT_AUTHOR_DATE GIT_COMMITTER_DATE
	   
  	 kata_git_diff(id, was_index, now_index)
	   This can be stateless too.
	   I just need to use the same trick as differ, get massive context around
	   the diffs so you get the entire files. Don't process the [git diff]
	   output in model at all. Let the differ service do that.
    
- This might change the model API slightly.
  Currently it offers...
    kata_events(id)
	   This will still be needed for dashboard and web.
	   So /events.json will still need to be saved as meta data
	
- Do I want to save the manifest in the tgz?
  Yes. It is needed if you want to create a start-point for example.

- tgz filename needs to include the exercise (if there is one)

- What should the tgz filename be called?
   individual: cyber-dojo-2021-03-14-DfH8sP-FizzBuzz
     - where FizzBuzz is optional as exercise may be unnamed.
                
- tgz contents will need to include a README.md file. 
  Provide info and instructions on pushing the repo to a remote, eg github?
  $ git remote add origin git@github.com:user/repo.git
  $ git push origin main  



Currently no git repos...

  /cyber-dojo/groups/12/34/56/manifest.json
  /cyber-dojo/groups/12/34/56/katas.txt == 2 lines
    rUqcey 26
    38w9NC 27


  /cyber-dojo/katas/5r/TJ/v5/manifest.json
  /cyber-dojo/katas/5r/TJ/v5/events.json
  /cyber-dojo/katas/5r/TJ/v5/1.event.json
  /cyber-dojo/katas/5r/TJ/v5/2.event.json




