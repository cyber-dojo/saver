
Suppose there are two laptops both running as the same avatar.
  lion, hippo, both on 46

Now lion tries to make two commits 47,48, but there is a saver outage,
  and only on the third commit, 49 does it get through to saver.

Then hippo makes a commit, 47 and it works because lion missed 47 (and 48).

This means is that when lion's 49 gets through it has to fill in
'blanks' for 47 and 48. 

Can it do this as tags; tag 46,47,48 will all be for the same commit.
But this tagging still has a potential race.

I think appending to events.json has to be done very carefully.
Eg suppose it looks like this:

{"index":46, "type":"test", ...},

And lion misses 47,48, but then does 49
This means events.json has to become...

{"index":46, "type":"test", ...},
{"index":47, "type":"outage", ...},
{"index":48, "type":"outage", ...},
{"index":49, "type":"test", ...},

and when hippo tries to do 47 it must fail not because there is no tag 47
but because there is already an index entry in events.json for 47.

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


$ git init 
$ git config user.name "#{id}"
$ git config user.email "#{id}@cyber-dojo.org"
$ # Add initial files
   files/*
   config/*
   manifest.json
   events_summmary.json
   event.json
$ git add .
$ git commit -m "0 kata creation"
$ git tag 0 
$ git branch -m master main


How to do an atomic commit...

$ events_src = `git show main:events.json`
$ events = JSON.parse('[' + events_src + ']')
$   # Check TAG is not already present as an index in events.json
$   # If it is, raise an exception
$   # Check TAG is greater than largest index in events.json
$   # If it is, raise an exception

$ # Generate a uniqueName
$ git worktree add /tmp/<uniqueName> 
$ cd /tmp/<uniqueName>
$ git rm -rf .

$ # Append any outage tags to events.json, from current index, to TAG-1
$ # Append new last line to events.json with index=TAG
$ # Save updated events.json

$ git checkout main config/
$ git checkout main manifest.json

$ # add all files/
$ # add stdout,stderr,status
$ # add event.json containing summary?

$ git add .
$ git commit -m "${TAG} predicted green got red"

$ cd BACK-TO-ORIGINAL kata's dir

$ git merge --ff-only <uniqueName>

#  Aim is that this merge fails if there is a parallel operation
#  It is crucial that the event.json entry has a "time" value using nanoseconds

$ git tag "${TAG}" 
# Add tags for saver-outage indexes

$ git worktree remove <uniqueName>
$ git branch -d <uniqueName>
$ rm -rf /tmp/<uniqueName>

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

It might be possible to somehow create an empty worktree
rather than creating a full one and then `git rm -rf .`

empty_tree=$(git hash-object -t tree /dev/null)
id=$(git commit-tree ${empty_tree} < /dev/null)
git checkout ${id}

https://stackoverflow.com/questions/54367011/git-bare-repositories-worktrees-and-tracking-branches

Might be possible to create an empty branch (and avoid the need for git rm -rf .)
by using plumbing commands for a speed up.
See https://stackoverflow.com/questions/645450


 

