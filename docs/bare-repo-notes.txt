
Notes on using a bare repo for v2 storage...(not doing this)

This is excellent...
http://git-scm.com/book/en/v2/Git-Internals-Git-Objects

It shows how to create a blob object using plumbing commands.
It even shows how to do it in raw Ruby code.

Next step is how do you give the blob its filename?
This is done in the tree.

This SO post gives a good explanation of the format for storing the trees
https://stackoverflow.com/questions/14790681/what-is-the-internal-format-of-a-git-tree-object

Note the comment in this SO post from Ross Feller
"If you're interested in creating the git tree object manually from its contents, it's important to note that the [Entries having references to other trees and blobs] needs to be sorted alphabetically by [file/folder name] (aka path)."

This is excellent too.
https://jwiegley.github.io/git-from-the-bottom-up/1-Repository/1-directory-content-tracking.html

This looks to be the Ruby library to use
https://github.com/libgit2/rugged
Does not install. Problems with SSL.

Do I really want bare repos?
1. Makes viewing the data directly at the file-system a bit trickier.
   You would probably have to create a non-bare repo copy in /tmp
   and then look at the working tree.
2. If people want to download their session in a git session tgz file
   then they will inevitably want to then push it to eg github.
   So this would also require the downloaded git repo to be non-bare.
   
It is possible to clone a bare repo into a normal repo.
$ git clone /bare/repo/foo.git /normal/repo/foo
See https://stackoverflow.com/questions/12450245

If I store the git repo in a normal format then
o) each git commit will be a bit slower.
   However, the [test] time is dominated by how long runner takes.
   And the saver store could even be async.
o) a tgz download will be fast (no need for a temporary clone)
o) it will use more disk space.

However, the model/group code assumes it can read the events.json summary cache.
So I really have to use normal non-bare repos.

Decision: Use normal repos.

